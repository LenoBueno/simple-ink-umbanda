# Etapa de construção
FROM node:18-alpine as build

# Definir o diretório de trabalho
WORKDIR /app

# Copiar apenas os arquivos de dependências primeiro para aproveitar o cache do Docker
COPY package*.json ./

# Instalar dependências com flags para reduzir o tamanho
RUN npm ci --only=production --no-audit --no-fund

# Copiar o restante dos arquivos do projeto
COPY . .

# Rodar o comando de build do React com otimizações
RUN npm run build

# Etapa de produção com Nginx otimizado
FROM nginx:alpine

# Adicionar usuário não-root para segurança
RUN adduser -D -H -u 1000 -s /sbin/nologin www-data

# Remover a configuração padrão do Nginx
RUN rm -rf /etc/nginx/conf.d/*

# Copiar a configuração personalizada do Nginx
COPY nginx.optimized.conf /etc/nginx/conf.d/default.conf

# Copiar os arquivos de build da etapa anterior para o diretório do Nginx
COPY --from=build /app/dist /usr/share/nginx/html/dist

# Criar diretório para o Node.js API
RUN mkdir -p /usr/share/nginx/api

# Copiar apenas os arquivos necessários para a API
COPY --from=build /app/server.optimized.js /usr/share/nginx/api/server.js
COPY --from=build /app/package*.json /usr/share/nginx/api/
COPY --from=build /app/node_modules /usr/share/nginx/api/node_modules
COPY --from=build /app/.env /usr/share/nginx/api/

# Criar diretórios de upload e garantir permissões
RUN mkdir -p /usr/share/nginx/html/uploads/imagens /usr/share/nginx/html/uploads/audios \
    && chown -R www-data:www-data /usr/share/nginx/html/uploads

# Expor a porta 80 para o Nginx
EXPOSE 80

# Copiar script de inicialização
COPY --from=build /app/start.sh /start.sh
RUN chmod +x /start.sh

# Comando para iniciar o Nginx e o Node.js API
CMD ["/start.sh"]